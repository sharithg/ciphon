// Code generated by tygo. DO NOT EDIT.

//////////
// source: models.go

export interface CommandOutput {
  id: any /* uuid.UUID */;
  stepId: any /* uuid.UUID */;
  stdout: string;
  type: string;
  outputOrder?: number /* int32 */;
  createdAt: any /* time.Time */;
}
export interface GithubRepo {
  id: any /* uuid.UUID */;
  repoId: number /* int64 */;
  name: string;
  owner: string;
  description?: string;
  url: string;
  repoCreatedAt: any /* time.Time */;
  rawData: any /* github.Repository */;
  createdAt: any /* time.Time */;
  updatedAt: any /* time.Time */;
}
export interface GithubUserInfo {
  userId: any /* uuid.UUID */;
  data: any /* auth.GitHubUser */;
  createdAt: any /* time.Time */;
  updatedAt: any /* time.Time */;
}
export interface JobRun {
  id: any /* uuid.UUID */;
  workflowId: any /* uuid.UUID */;
  name: string;
  status?: string;
  docker: string;
  node?: string;
  createdAt: any /* time.Time */;
  updatedAt: any /* time.Time */;
  requires: any /* uuid.UUID */[];
}
export interface Node {
  id: any /* uuid.UUID */;
  host: string;
  port: number /* int32 */;
  name: string;
  username: string;
  pemFile: string;
  status: string;
  agentToken: string;
  createdAt: any /* time.Time */;
  updatedAt: any /* time.Time */;
}
export interface PipelineRun {
  id: any /* uuid.UUID */;
  commitSha: string;
  configFile: string;
  repoId: number /* int64 */;
  status: string;
  branch: string;
  createdAt: any /* time.Time */;
  updatedAt: any /* time.Time */;
}
export interface StepRun {
  id: any /* uuid.UUID */;
  jobId: any /* uuid.UUID */;
  stepOrder: number /* int32 */;
  type: string;
  name?: string;
  status?: string;
  command?: string;
  keys: string[];
  paths: string[];
  createdAt: any /* time.Time */;
  updatedAt: any /* time.Time */;
}
export interface User {
  id: any /* uuid.UUID */;
  username: string;
  email: string;
  authType?: string;
  externalId: string;
  createdAt: any /* time.Time */;
  updatedAt: any /* time.Time */;
}
export interface WorkflowRun {
  id: any /* uuid.UUID */;
  name: string;
  status?: string;
  pipelineRunId: any /* uuid.UUID */;
  duration?: number /* float64 */;
  createdAt: any /* time.Time */;
  updatedAt: any /* time.Time */;
}
