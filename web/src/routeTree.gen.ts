/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LoginIndexImport } from './routes/login/index'
import { Route as DashboardLayoutImport } from './routes/dashboard/_layout'
import { Route as LoginGithubCallbackImport } from './routes/login/github/callback'
import { Route as DashboardLayoutSettingsImport } from './routes/dashboard/_layout.settings'
import { Route as DashboardLayoutProjectsImport } from './routes/dashboard/_layout.projects'
import { Route as DashboardLayoutPipelinesIndexImport } from './routes/dashboard/_layout/pipelines/index'
import { Route as DashboardLayoutPipelinesLayoutWorkflowsWorkflowIdIndexImport } from './routes/dashboard/_layout/pipelines/_layout/workflows/$workflowId/index'
import { Route as DashboardLayoutPipelinesLayoutWorkflowsWorkflowIdLayoutJobsJobIdImport } from './routes/dashboard/_layout/pipelines/_layout/workflows/$workflowId/_layout/jobs/$jobId'

// Create Virtual Routes

const DashboardImport = createFileRoute('/dashboard')()

// Create/Update Routes

const DashboardRoute = DashboardImport.update({
  path: '/dashboard',
  getParentRoute: () => rootRoute,
} as any)

const LoginIndexRoute = LoginIndexImport.update({
  path: '/login/',
  getParentRoute: () => rootRoute,
} as any)

const DashboardLayoutRoute = DashboardLayoutImport.update({
  id: '/_layout',
  getParentRoute: () => DashboardRoute,
} as any)

const LoginGithubCallbackRoute = LoginGithubCallbackImport.update({
  path: '/login/github/callback',
  getParentRoute: () => rootRoute,
} as any)

const DashboardLayoutSettingsRoute = DashboardLayoutSettingsImport.update({
  path: '/settings',
  getParentRoute: () => DashboardLayoutRoute,
} as any)

const DashboardLayoutProjectsRoute = DashboardLayoutProjectsImport.update({
  path: '/projects',
  getParentRoute: () => DashboardLayoutRoute,
} as any)

const DashboardLayoutPipelinesIndexRoute =
  DashboardLayoutPipelinesIndexImport.update({
    path: '/pipelines/',
    getParentRoute: () => DashboardLayoutRoute,
  } as any)

const DashboardLayoutPipelinesLayoutWorkflowsWorkflowIdIndexRoute =
  DashboardLayoutPipelinesLayoutWorkflowsWorkflowIdIndexImport.update({
    path: '/pipelines/workflows/$workflowId/',
    getParentRoute: () => DashboardLayoutRoute,
  } as any)

const DashboardLayoutPipelinesLayoutWorkflowsWorkflowIdLayoutJobsJobIdRoute =
  DashboardLayoutPipelinesLayoutWorkflowsWorkflowIdLayoutJobsJobIdImport.update(
    {
      path: '/pipelines/workflows/$workflowId/jobs/$jobId',
      getParentRoute: () => DashboardLayoutRoute,
    } as any,
  )

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardImport
      parentRoute: typeof rootRoute
    }
    '/dashboard/_layout': {
      id: '/dashboard/_layout'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardLayoutImport
      parentRoute: typeof DashboardRoute
    }
    '/login/': {
      id: '/login/'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginIndexImport
      parentRoute: typeof rootRoute
    }
    '/dashboard/_layout/projects': {
      id: '/dashboard/_layout/projects'
      path: '/projects'
      fullPath: '/dashboard/projects'
      preLoaderRoute: typeof DashboardLayoutProjectsImport
      parentRoute: typeof DashboardLayoutImport
    }
    '/dashboard/_layout/settings': {
      id: '/dashboard/_layout/settings'
      path: '/settings'
      fullPath: '/dashboard/settings'
      preLoaderRoute: typeof DashboardLayoutSettingsImport
      parentRoute: typeof DashboardLayoutImport
    }
    '/login/github/callback': {
      id: '/login/github/callback'
      path: '/login/github/callback'
      fullPath: '/login/github/callback'
      preLoaderRoute: typeof LoginGithubCallbackImport
      parentRoute: typeof rootRoute
    }
    '/dashboard/_layout/pipelines/': {
      id: '/dashboard/_layout/pipelines/'
      path: '/pipelines'
      fullPath: '/dashboard/pipelines'
      preLoaderRoute: typeof DashboardLayoutPipelinesIndexImport
      parentRoute: typeof DashboardLayoutImport
    }
    '/dashboard/_layout/pipelines/_layout/workflows/$workflowId/': {
      id: '/dashboard/_layout/pipelines/_layout/workflows/$workflowId/'
      path: '/pipelines/workflows/$workflowId'
      fullPath: '/dashboard/pipelines/workflows/$workflowId'
      preLoaderRoute: typeof DashboardLayoutPipelinesLayoutWorkflowsWorkflowIdIndexImport
      parentRoute: typeof DashboardLayoutImport
    }
    '/dashboard/_layout/pipelines/_layout/workflows/$workflowId/_layout/jobs/$jobId': {
      id: '/dashboard/_layout/pipelines/_layout/workflows/$workflowId/_layout/jobs/$jobId'
      path: '/pipelines/workflows/$workflowId/jobs/$jobId'
      fullPath: '/dashboard/pipelines/workflows/$workflowId/jobs/$jobId'
      preLoaderRoute: typeof DashboardLayoutPipelinesLayoutWorkflowsWorkflowIdLayoutJobsJobIdImport
      parentRoute: typeof DashboardLayoutImport
    }
  }
}

// Create and export the route tree

interface DashboardLayoutRouteChildren {
  DashboardLayoutProjectsRoute: typeof DashboardLayoutProjectsRoute
  DashboardLayoutSettingsRoute: typeof DashboardLayoutSettingsRoute
  DashboardLayoutPipelinesIndexRoute: typeof DashboardLayoutPipelinesIndexRoute
  DashboardLayoutPipelinesLayoutWorkflowsWorkflowIdIndexRoute: typeof DashboardLayoutPipelinesLayoutWorkflowsWorkflowIdIndexRoute
  DashboardLayoutPipelinesLayoutWorkflowsWorkflowIdLayoutJobsJobIdRoute: typeof DashboardLayoutPipelinesLayoutWorkflowsWorkflowIdLayoutJobsJobIdRoute
}

const DashboardLayoutRouteChildren: DashboardLayoutRouteChildren = {
  DashboardLayoutProjectsRoute: DashboardLayoutProjectsRoute,
  DashboardLayoutSettingsRoute: DashboardLayoutSettingsRoute,
  DashboardLayoutPipelinesIndexRoute: DashboardLayoutPipelinesIndexRoute,
  DashboardLayoutPipelinesLayoutWorkflowsWorkflowIdIndexRoute:
    DashboardLayoutPipelinesLayoutWorkflowsWorkflowIdIndexRoute,
  DashboardLayoutPipelinesLayoutWorkflowsWorkflowIdLayoutJobsJobIdRoute:
    DashboardLayoutPipelinesLayoutWorkflowsWorkflowIdLayoutJobsJobIdRoute,
}

const DashboardLayoutRouteWithChildren = DashboardLayoutRoute._addFileChildren(
  DashboardLayoutRouteChildren,
)

interface DashboardRouteChildren {
  DashboardLayoutRoute: typeof DashboardLayoutRouteWithChildren
}

const DashboardRouteChildren: DashboardRouteChildren = {
  DashboardLayoutRoute: DashboardLayoutRouteWithChildren,
}

const DashboardRouteWithChildren = DashboardRoute._addFileChildren(
  DashboardRouteChildren,
)

export interface FileRoutesByFullPath {
  '/dashboard': typeof DashboardLayoutRouteWithChildren
  '/login': typeof LoginIndexRoute
  '/dashboard/projects': typeof DashboardLayoutProjectsRoute
  '/dashboard/settings': typeof DashboardLayoutSettingsRoute
  '/login/github/callback': typeof LoginGithubCallbackRoute
  '/dashboard/pipelines': typeof DashboardLayoutPipelinesIndexRoute
  '/dashboard/pipelines/workflows/$workflowId': typeof DashboardLayoutPipelinesLayoutWorkflowsWorkflowIdIndexRoute
  '/dashboard/pipelines/workflows/$workflowId/jobs/$jobId': typeof DashboardLayoutPipelinesLayoutWorkflowsWorkflowIdLayoutJobsJobIdRoute
}

export interface FileRoutesByTo {
  '/dashboard': typeof DashboardLayoutRouteWithChildren
  '/login': typeof LoginIndexRoute
  '/dashboard/projects': typeof DashboardLayoutProjectsRoute
  '/dashboard/settings': typeof DashboardLayoutSettingsRoute
  '/login/github/callback': typeof LoginGithubCallbackRoute
  '/dashboard/pipelines': typeof DashboardLayoutPipelinesIndexRoute
  '/dashboard/pipelines/workflows/$workflowId': typeof DashboardLayoutPipelinesLayoutWorkflowsWorkflowIdIndexRoute
  '/dashboard/pipelines/workflows/$workflowId/jobs/$jobId': typeof DashboardLayoutPipelinesLayoutWorkflowsWorkflowIdLayoutJobsJobIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/dashboard': typeof DashboardRouteWithChildren
  '/dashboard/_layout': typeof DashboardLayoutRouteWithChildren
  '/login/': typeof LoginIndexRoute
  '/dashboard/_layout/projects': typeof DashboardLayoutProjectsRoute
  '/dashboard/_layout/settings': typeof DashboardLayoutSettingsRoute
  '/login/github/callback': typeof LoginGithubCallbackRoute
  '/dashboard/_layout/pipelines/': typeof DashboardLayoutPipelinesIndexRoute
  '/dashboard/_layout/pipelines/_layout/workflows/$workflowId/': typeof DashboardLayoutPipelinesLayoutWorkflowsWorkflowIdIndexRoute
  '/dashboard/_layout/pipelines/_layout/workflows/$workflowId/_layout/jobs/$jobId': typeof DashboardLayoutPipelinesLayoutWorkflowsWorkflowIdLayoutJobsJobIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/dashboard'
    | '/login'
    | '/dashboard/projects'
    | '/dashboard/settings'
    | '/login/github/callback'
    | '/dashboard/pipelines'
    | '/dashboard/pipelines/workflows/$workflowId'
    | '/dashboard/pipelines/workflows/$workflowId/jobs/$jobId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/dashboard'
    | '/login'
    | '/dashboard/projects'
    | '/dashboard/settings'
    | '/login/github/callback'
    | '/dashboard/pipelines'
    | '/dashboard/pipelines/workflows/$workflowId'
    | '/dashboard/pipelines/workflows/$workflowId/jobs/$jobId'
  id:
    | '__root__'
    | '/dashboard'
    | '/dashboard/_layout'
    | '/login/'
    | '/dashboard/_layout/projects'
    | '/dashboard/_layout/settings'
    | '/login/github/callback'
    | '/dashboard/_layout/pipelines/'
    | '/dashboard/_layout/pipelines/_layout/workflows/$workflowId/'
    | '/dashboard/_layout/pipelines/_layout/workflows/$workflowId/_layout/jobs/$jobId'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  DashboardRoute: typeof DashboardRouteWithChildren
  LoginIndexRoute: typeof LoginIndexRoute
  LoginGithubCallbackRoute: typeof LoginGithubCallbackRoute
}

const rootRouteChildren: RootRouteChildren = {
  DashboardRoute: DashboardRouteWithChildren,
  LoginIndexRoute: LoginIndexRoute,
  LoginGithubCallbackRoute: LoginGithubCallbackRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/dashboard",
        "/login/",
        "/login/github/callback"
      ]
    },
    "/dashboard": {
      "filePath": "dashboard",
      "children": [
        "/dashboard/_layout"
      ]
    },
    "/dashboard/_layout": {
      "filePath": "dashboard/_layout.tsx",
      "parent": "/dashboard",
      "children": [
        "/dashboard/_layout/projects",
        "/dashboard/_layout/settings",
        "/dashboard/_layout/pipelines/",
        "/dashboard/_layout/pipelines/_layout/workflows/$workflowId/",
        "/dashboard/_layout/pipelines/_layout/workflows/$workflowId/_layout/jobs/$jobId"
      ]
    },
    "/login/": {
      "filePath": "login/index.tsx"
    },
    "/dashboard/_layout/projects": {
      "filePath": "dashboard/_layout.projects.tsx",
      "parent": "/dashboard/_layout"
    },
    "/dashboard/_layout/settings": {
      "filePath": "dashboard/_layout.settings.tsx",
      "parent": "/dashboard/_layout"
    },
    "/login/github/callback": {
      "filePath": "login/github/callback.tsx"
    },
    "/dashboard/_layout/pipelines/": {
      "filePath": "dashboard/_layout/pipelines/index.tsx",
      "parent": "/dashboard/_layout"
    },
    "/dashboard/_layout/pipelines/_layout/workflows/$workflowId/": {
      "filePath": "dashboard/_layout/pipelines/_layout/workflows/$workflowId/index.tsx",
      "parent": "/dashboard/_layout"
    },
    "/dashboard/_layout/pipelines/_layout/workflows/$workflowId/_layout/jobs/$jobId": {
      "filePath": "dashboard/_layout/pipelines/_layout/workflows/$workflowId/_layout/jobs/$jobId.tsx",
      "parent": "/dashboard/_layout"
    }
  }
}
ROUTE_MANIFEST_END */
